From f308d28b84523a963ecdef1b12e276afc69b6139 Mon Sep 17 00:00:00 2001
From: Hunt Xu <mhuntxu@gmail.com>
Date: Wed, 19 Jul 2017 17:06:53 +0800
Subject: [PATCH] Switch to use classmethod in eayun notifier

Or it will cause problems when running neutron-db-manage.

Fixes: 057990390("Add status_changed notification for some components")
Fixes: #10220

Signed-off-by: Hunt Xu <mhuntxu@gmail.com>
---
 neutron/notifiers/eayun.py | 28 +++++++++++++---------------
 1 file changed, 13 insertions(+), 15 deletions(-)

diff --git a/neutron/notifiers/eayun.py b/neutron/notifiers/eayun.py
index 5c09c4774..4f9f0ecb3 100644
--- a/neutron/notifiers/eayun.py
+++ b/neutron/notifiers/eayun.py
@@ -4,19 +4,17 @@ from neutron.plugins.common import constants
 
 
 class Notifier(object):
+    __notifier = None
 
-    def __init__(self):
-        self._notifier = n_rpc.get_notifier('eayun')
-
-    def status_changed(self, context, resource, resource_id, status):
-        self._notifier.info(
+    @classmethod
+    def status_changed(cls, context, resource, resource_id, status):
+        if not cls.__notifier:
+            Notifier.__notifier = n_rpc.get_notifier('eayun')
+        Notifier.__notifier.info(
             context, resource + '.status.changed',
             {resource: {'id': resource_id, 'status': status}})
 
 
-_notifier = Notifier()
-
-
 def eayun_notify(service, obj_model=None):
     def handle_func(func):
         def handle_firewall(
@@ -24,7 +22,7 @@ def eayun_notify(service, obj_model=None):
         ):
             ret = func(
                 fw_rpc_callback, context, firewall_id, status, **kwargs)
-            _notifier.status_changed(context, 'firewall', firewall_id, status)
+            Notifier.status_changed(context, 'firewall', firewall_id, status)
             return ret
 
         def handle_ipsec_vpns(
@@ -32,13 +30,13 @@ def eayun_notify(service, obj_model=None):
         ):
             func(vpn_plugin, context, service_status_info_list)
             for vpnservice in service_status_info_list:
-                _notifier.status_changed(
+                Notifier.status_changed(
                     context, 'vpnservice',
                     vpnservice['id'], vpnservice['status'])
                 for conn_id, conn in vpnservice[
                         'ipsec_site_connections'
                 ].items():
-                    _notifier.status_changed(
+                    Notifier.status_changed(
                         context, 'ipsec_site_connection',
                         conn_id, conn['status'])
 
@@ -47,20 +45,20 @@ def eayun_notify(service, obj_model=None):
         ):
             func(lb_rpc_callback, context, obj_type, obj_id, status)
             if obj_type != 'member':
-                _notifier.status_changed(context, obj_type, obj_id, status)
+                Notifier.status_changed(context, obj_type, obj_id, status)
 
         def handle_lb_member(
                 lb_plugin, context, model, obj_id, status, **kwargs
         ):
             func(lb_plugin, context, model, obj_id, status, **kwargs)
             if issubclass(model, obj_model):
-                _notifier.status_changed(context, 'member', obj_id, status)
+                Notifier.status_changed(context, 'member', obj_id, status)
 
         def handle_pptp_vpn(
                 vpn_plugin, context, vpnservice_id, status
         ):
             func(vpn_plugin, context, vpnservice_id, status)
-            _notifier.status_changed(
+            Notifier.status_changed(
                 context, 'vpnservice', vpnservice_id, status)
 
         def handle_pptp_ports(
@@ -73,7 +71,7 @@ def eayun_notify(service, obj_model=None):
                 port_status = n_constants.PORT_STATUS_DOWN
                 if status:
                     port_status = n_constants.PORT_STATUS_ACTIVE
-                _notifier.status_changed(
+                Notifier.status_changed(
                     context, 'pptp_port', port_id, port_status)
 
         if service == constants.FIREWALL:
-- 
2.13.3

